<?php
/**
 * Created by PhpStorm.
 * User: noelwalsh
 * Date: 08/12/2014
 * Time: 16:38
 */

namespace frontend\controllers\yiicomp;

use common\models\DigitalProduct;
use common\models\EmailedItem;
use common\models\EmailedUser;
use Yii;
use yii\web\Controller;
use common\models\Stockroom;
use common\models\StockItem;
use common\models\StockItemSearch;

use yii\filters\AccessControl;
use common\components\DigitalPurchaser ;

<<<<<<< HEAD
use exertis\savewithaudittrail\models\Audittrail;
=======
use exertis\savewithaudittrail\models\audittrail;
use common\models\StockActivity;
>>>>>>> origin/stockroom-1224

use common\models\Accounts;

class StockroomController  extends \frontend\controllers\EdsrController {

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['stockroom', 'header', 'selected', 'emailkeys', 'viewkeys', 'revieworders', 'orders'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    /**
     * HEADER
     * ======
     * This handles display and, possibly editing, of the stockroom name
     *
     * @return string
     */
    public function actionHeader() {
        $result = $this->getUserDetails() ;
        if ($result !== true) {

            $formatType = Yii::$app->request->get('t');

            if ($formatType == 'h') {
                return $this->getStockroomNames();

            } elseif ($formatType == 'd') {
                Yii::$app->response->format = 'json';

                return $this->user->getStockroomDetails();
            }
        }
        Yii::$app->response->format = 'raw';
        header('Content-Type: application/javascript');

        return $this->render('header.js', [

        ]);
    }


    public function actionOrders () {

    }

    /**
     * SELECTED
     * ========
     * This module will display the products which the user has selected but
     * has yet to deliver to a customer
     *
     * @return string
     */
    public function actionSelected () {
        $result = $this->getUserDetails() ;
        if ($result !== false) {

            $formatType = Yii::$app->request->get('t');

            if ($formatType == 'h') {
                return $this->showSelectedProducts();

            } elseif ($formatType == 'd') {
                Yii::$app->response->format = 'json';

                return $this->user->getStockroomDetails();
            }
        }

        Yii::$app->response->format = 'raw';
        header('Content-Type: application/javascript');

        return $this->render('selected.js', [

        ]);
    }

    /**
     * SHOW SELECTED PRODUCTS
     * ======================
     * @return string
     */
    private function showSelectedProducts() {
        Yii::$app->response->format = 'raw';
        header('Content-Type: application/javascript');

        return $this->render('selected.html', [

        ]);
    }


    /**
     * STOCKROOM
     * =========
     * Use this to return the html, plus custom tags, for the overall
     * client view
     */
    public function actionStockroom() {

        $result = $this->getUserDetails() ;
        if ($result !== false) {

            $formatType = Yii::$app->request->get('t');

            if ($formatType == 'd') {


                Yii::$app->response->format = 'json';

                return $this->user->getStockroomDetails();
            }
        }

        \Yii::$app->session->setFlash('error', 'Not authorised');

        return Yii::$app->getResponse()->redirect('/', 400);
        $this->user = false ;

    }

    /**
     * GET STOCK ROOM NAMES
     * ====================
     * Returns the list of stock rooms for the current user
     *
     * @return string
     */
    private function getStockroomNames()
    {
        $params = [
            'StockroomSearch'   => [
                'account_id'    => $this->user->account_id,
            ]
        ] ;

        // -------------------------------------------------------------------
        // Add any user provided search criteria. But make sure the params are
        // added last in case they sneakily try to submit an account_id value
        // -------------------------------------------------------------------
        $userInputs = Yii::$app->request->getQueryParams() ;
        if (is_array($userInputs)) {
            $params = array_merge($userInputs, $params) ;
        }

        // -------------------------------------------------------------------
        //
        // -------------------------------------------------------------------
        return $this->render('header-html', [
//            'dataProvider' => $dataProvider,
//            'searchModel' => $searchModel,
        ]);

    }

    /**
     * EMAIL KEYS
     * ==========
     */
    public function actionEmailkeys () {
        $status = 200 ;
        $errors = [] ;

        $result = $this->getUserDetails() ;
        if ($result !== false) {

            $recipientDetails   = $this->getAndValidateRecipientDetails() ;
            $selectedCounts = $this->getAndValidateSelectedCounts() ;

            StockActivity::log('Emailing keys for ' . count($selectedCounts) . ' products', $this->stockroomId,
                                        null, $recipientDetails['orderNumber'],
                                        EmailedItem::tableName(), null,
                                        $recipientDetails['recipient'], $recipientDetails['email']
                            ) ;

            if (count($recipientDetails['errors']) > 0 ||
                count($selectedCounts['errors']) > 0) {

                StockActivity::log('Emailing failed due to insufficient available stock', $this->stockroomId) ;

                $errors ['insufficient'] = $selectedCounts['errors'] ;
                $errors['recipient']     = $recipientDetails['errors'] ;

                StockActivity::log('Unable to email as not enough stock available', $this->stockroomId) ;

            } else {
                $errors = $this->completeEmailOrder($recipientDetails, $selectedCounts) ;
            }

            if ($errors !== true && count($errors)) {
                $result = $errors ;
                $status = 409 ;             // Conflict

            } else {
                $result = 'ok' ;
            }
        }
        Yii::$app->response->format = 'json';
        Yii::$app->response->setStatusCode($status) ;

        return json_encode($result) ;

    }

    /**
     * ACTION VIEW KEYS
     * ================
     * This is called with a product code and status code which it uses
     * to build a table listing the keys for all stock in that state.
     *
     */
    public function actionViewkeys ()
    {
        $status = 200;
        $errors = [];

        $digitalProductId  = $_GET['pid'];
        $this->stockroomId = $_GET['stockroom'];
        $status            = $_GET['status'];

        $result = $this->getUserDetails();

        if ($result === false) {
            echo 'Forbidden' ;
            return ;
        }

        return $this->fetchProductAndKeys($status, $digitalProductId) ;
    }


    /**
     * ACTION ORDER
     * ============
     * This should be used to generate an order history for a specific product
     *
     * @return string
     */
    public function actionRevieworders() {

        $status = 200;
        $errors = [];

        $digitalProductId  = $_GET['pid'];
        $this->stockroomId = $_GET['stockroom'];
        $status            = $_GET['status'];

        $result = $this->getUserDetails();

        if ($result === false) {
            echo 'Forbidden' ;
            return ;
        }

        return $this->fetchOrderHistory($status, $digitalProductId) ;
    }




    /**
     * GET AND VALIDATE SELECTED COUNTS
     * ================================
     * Gathers the number of items required per product as an array indexed
     * by product code.
     */
    private function getAndValidateSelectedCounts () {
        $selectedItems = $_POST['items'] ;

        $pCodes = [] ;

        foreach ($selectedItems as $item) {
            if ($item['quantity'] > 0) {
                $pCodes[$item['productCode']] = ['quantity' => $item['quantity'], 'description' => '', 'items' => []] ;
            }
        }
        $this->countAvailableItemPerProduct($pCodes) ;

        $inSufficient = $this->checkAvailableCountsAreSufficient($pCodes) ;

        return ['codes' => $pCodes, 'errors' => $inSufficient !== true ? $inSufficient : null] ;
    }

    /**
     * GET AND VALIDATE RECIPIENT DETAILS
     * ==================================
     */
    private function getAndValidateRecipientDetails() {
        $recipientDetails = [
            'email'       => $_POST['email'],
            'recipient'   => $_POST['recipient'],
            'orderNumber' => $_POST['onumber'],
            'errors'      => []
        ] ;

        $recipientDetails['user'] = Yii::$app->getModule("user")->model("User")->findByEmail($recipientDetails['email']) ;

        if (empty($recipientDetails['email'])) {
            $recipientDetails['errors']['email'] = 'You must provide an email address' ;

        } elseif (!filter_var($recipientDetails['email'], FILTER_VALIDATE_EMAIL)) {
            $recipientDetails['errors']['email'] = 'This is not a valid email address' ;
        }

        if (empty($recipientDetails['recipient'])) {
            $recipientDetails['errors']['recipient'] = 'You must provide the recipient name' ;
        }
        if (empty($recipientDetails['orderNumber'])) {
            $recipientDetails['errors']['orderNumber'] = 'You must provide an order number' ;

        } elseif (EmailedUser::find()->where(['order_number' =>  StockItem::STATUS_DELIVERING . $recipientDetails['orderNumber'],
                                                    'account_id' => $this->user->account_id])->count() > 0) {
            $recipientDetails['errors']['orderNumber'] = 'This order number (' . $recipientDetails['orderNumber'] . ')  has already been used' ;
        }

        return $recipientDetails ;
    }

    /**
     * COMPLETE ORDER
     * ==============
     *
     * @param $recipientDetails
     * @param $selectedCounts
     *
     * @return array|StockroomController|mixed|string|static
     * @throws \Exception
     */
    private function completeEmailOrder($recipientDetails, $selectedCounts) {

        $result = $this->saveEmailedOrderDetails($recipientDetails, $selectedCounts) ;

        if ($result === true ) {
            $result = $this->sendOrderEmailToCustomer($recipientDetails, $selectedCounts) ;
        }
        return $result ;
    }

    /**
     * COUNT AVAILABLE ITEMS PER PRODUCT
     * =================================
     *
     * @param $pCodes
     */
    private function countAvailableItemPerProduct (&$pCodes) {

        $productCodes = array_keys($pCodes);

        $count = StockItem::find()
                    ->where(['in', 'productcode', $productCodes ])
                    ->andWhere(['stockroom_id' => $this->stockroomId])
                    ->groupBy(['productcode'])
                    ->select(['productcode, count(*) num'])
                    ->all();
                $counts = [] ;

        foreach ($count as $cnt) {
            $pCodes[$cnt->productcode]['available'] = $cnt->num ;
        }
    }


    /**
     * CHECK AVAILABLE COUNTS ARE SUFFICIENT
     * =====================================
     * Compares the requested count to the actual available number for each
     * requested product and returns
     *
     *      true            if all counts can be provided
     *      [counts]        an array of available counts where they can't be
     *
     * @param $pCodes
     *
     * @return array|bool
     */
    private function checkAvailableCountsAreSufficient($pCodes) {
        $inSufficient = [] ;

        foreach ($pCodes as $productCode => $details) {
            if (!array_key_exists('available', $details)) {
                $inSufficient[$productCode] = 0 ;

            } elseif ($details['available'] < $details['quantity']) {
                $inSufficient[$productCode] = $details['available'] ;
            }
        }

        return count($inSufficient) == 0 ? true : $inSufficient ;
    }

    /**
     * SAVE EMAILED ORDER DETAILS
     * ==========================
     * @param $recipientDetails
     * @param $selectedCounts
     *
     * @return array|string|static
     * @throws \Exception
     * @throws \yii\db\Exception
     */
    private function saveEmailedOrderDetails ($recipientDetails, &$selectedCounts) {

        $errors = [] ;
        $connection = EmailedUser::getDb() ;
        $transaction = $connection->beginTransaction();
        try {
            $result = $this->saveEmailedRecipient($recipientDetails) ;

            if ($result !== true ) {
                $errors['user'] = $result ;

            // ---------------------------------------------------------------
            // Can now record the individual stock item movements
            // ---------------------------------------------------------------
            } else {
                $newStatusCode = StockItem::STATUS_DELIVERING . $recipientDetails['orderNumber'];

                $result = $this->updateStockItems($newStatusCode, $selectedCounts);

                if ($result !== true) {
                    $errors['insufficient'] = $result;

                } else {
                    if ($this->copyStockItemsToEmailedItems($newStatusCode, $recipientDetails)) {
                        $this->readDescriptionAndKeys($recipientDetails, $selectedCounts) ;
                    } else {
                        $errors['unknown'] = 'Failed' ;
                    }
                }
            }
            if (count($errors)) {
                $result = $errors ;
                $transaction->rollBack() ;

            } else {
                $transaction->commit() ;
                $result = true ;
            }

        } catch(\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }
        return $result ;
    }

    /**
     * SAVE EMAILED RECIPIENT
     * ======================
     * @param $recipientDetails
     *
     * @return bool
     */
    private function saveEmailedRecipient (&$recipientDetails) {
        $result = true ;

        // ---------------------------------------------------------------
        // First, try to record the main emailed_user details
        // ---------------------------------------------------------------
        $emailedRecipient               = new EmailedUser();
        $emailedRecipient->email        = $recipientDetails['email'];
        $emailedRecipient->name         = $recipientDetails['recipient'];
        $emailedRecipient->order_number = StockItem::STATUS_DELIVERING . $recipientDetails['orderNumber'];

        $emailedRecipient->account_id   = $this->user->account_id ;

        if (!$emailedRecipient->saveWithAuditTrail('New emailed order for ' . $emailedRecipient->order_number)) {
            $result = $emailedRecipient->errors;

        }else {
            $recipientDetails['emailedUser'] = $emailedRecipient ;
        }

        return $result ;
    }

    /**
     * UPDATE STOCK ITEMS
     * ==================
     * This attempts to flag all the requested stock items as allocated to
     * the current order
     *
     * @param $newStatusCode
     * @param $selectedCounts
     *
     * @return bool
     * @throws \yii\db\Exception
     */
    private function updateStockItems($newStatusCode, $selectedCounts)
    {
        $errors = [] ;

        $connection = EmailedUser::getDb() ;

        foreach ($selectedCounts['codes'] as $pCode => $details) {
            $quantity = $details['quantity'];

//                    $recordedCount = StockItem::limit($quantity)->updateAll(['status' => $newStatusCode],
//                                            ['productcode' => $pCode,
//                                             'status'      => StockItem::STATUS_PURCHASED]
//                                        ) ;

            $recordedCount = $connection->createCommand('UPDATE ' . StockItem::tableName() .
                ' SET status=:newStatusCode
                  WHERE
                    status = :oldStatus AND
                    productcode = :pCode AND
                    stockroom_id= :stockroomId
                    LIMIT ' . intval($quantity))
                ->bindValues([
                    ':newStatusCode' => $newStatusCode,
                    ':oldStatus'     => StockItem::STATUS_PURCHASED,
                    ':pCode'         => $pCode,
                    'stockroomId'    => $this->stockroomId
                ])->execute();

            // -------------------------------------------------------
            // If failed to move enough, record the available count
            // -------------------------------------------------------
            if ($recordedCount <> $quantity) {
                $errors[$pCode] = $recordedCount;
            }
        }

        return count($errors) ? $errors : true ;
    }

    /**
     * COPY STOCK ITEMS TO EMAILED ITEMS
     * =================================
     *
     * @param $newStatusCode
     * @param $recipientDetails
     *
     * @return bool|int
     * @throws \yii\db\Exception
     */
    private function copyStockItemsToEmailedItems($newStatusCode, $recipientDetails) {
        $result = true ;

        $connection = EmailedUser::getDb() ;

        $result = $connection->createCommand(
                                'INSERT INTO ' . EmailedItem::tableName() . '
                                        (emailed_user_id, stock_item_id, created_at)
                                        SELECT :emailedId, id, NOW()
                                        FROM ' . StockItem::tableName() . '
                                        WHERE status=:status'
                                )
                                ->bindValues([':emailedId' => $recipientDetails['emailedUser']['id'],
                                              ':status'    => $newStatusCode])
                                ->execute() ;


        $msg = 'Stock items emailed to recipient for '. $recipientDetails['email'] . ' order ' . $recipientDetails['orderNumber'] ;
        $tableName = EmailedItem::tableName()  ;
        $recordId = $recipientDetails['emailedUser']['id'] ;

        $auditentry = new Audittrail();
        $auditentry->log($msg, $tableName, $recordId, $this->user) ;
        $auditentry->save();

        return $result > 0 ;;
    }

    /**
     * READ DESCRIPTION AND KEYS
     * =========================
     * @param $recipientDetails
     * @param $selectedCounts
     */
    private function readDescriptionAndKeys($recipientDetails, &$selectedCounts) {
        $emailedUser = $recipientDetails['emailedUser'] ;

        foreach ($emailedUser->emailedItems as $emailedItem) {
            $stockItem = $emailedItem->stockItem ;

            $productKey = DigitalPurchaser::getProductInstallKey($stockItem);

            $selectedCounts['codes'][$stockItem['productcode']]['description'] = $stockItem->description ;
            $selectedCounts['codes'][$stockItem['productcode']]['items'][] = $productKey ;
        }

    }

    /**
     * SEND ORDER EMAIL TO CUSTOMER
     * ============================
     * @var Mailer $mailer
     * @var Message $message
     * @var \amnah\yii2\user\models\UserKey $userKey
     *
     * @param $recipientDetails
     * @param $selectedCounts
     *
     * @return mixed
     */
    private function sendOrderEmailToCustomer ($recipientDetails, $selectedCounts) {

        $mailer           = Yii::$app->mailer;
        $subject = 'Exertis Digital Stock Room: ' . Yii::t("user", "Order Details for " . $recipientDetails['orderNumber']);
print_r($selectedCounts) ;
        $message  = $mailer->compose('stockroom/orderedetails',
                            compact("subject", "recipientDetails", "selectedCounts"))

                        ->setTo([$recipientDetails['email'] => $recipientDetails['recipient']])
                        ->setSubject($subject);

        // check for messageConfig before sending (for backwards-compatible purposes)
        if (empty($mailer->messageConfig["from"])) {
            $message->setFrom(Yii::$app->params["adminEmail"]);
        }
        $result = $message->send();

        return $result;
    }

    /**
     * FETCH PRODUCT AND KEYS
     * ======================
     * For view keys - not complete
     *
     * @param $status
     * @param $digitalProductId
     *
     * @return string
     */
    private function fetchProductAndKeys($status, $digitalProductId) {
        $dprod = DigitalProduct::findOne($digitalProductId) ;

        $stockItems = StockItem::find()
                        ->where(['stockroom_id' => $this->stockroomId])
                        ->andWhere(['productcode' => $dprod->partcode])
                        ->andWhere(['status' => $status])
                        ->all() ;

        return $this->render('keyview', [
            'product'       => $dprod,
            'items'         => $stockItems
        ]);
    }

    private function fetchOrderHistory($status, $digitalProductId) {
        $dprod = DigitalProduct::findOne($digitalProductId) ;

        $stockItems = StockItem::find()
            ->where(['stockroom_id' => $this->stockroomId])
            ->andWhere(['productcode' => $dprod->partcode])
            ->andWhere(['status' => $status])
            ->all() ;

        return $this->render('orderhistory  ', [
            'product'       => $dprod,
            'items'         => $stockItems
        ]);
    }
}
